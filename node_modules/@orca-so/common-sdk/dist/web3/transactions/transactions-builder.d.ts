import { Provider } from "@project-serum/anchor";
import { Signer } from "@solana/web3.js";
import { Instruction, TransactionPayload } from "./types";
/**
 * @category Transactions Util
 */
export declare type TransformableInstruction = Instruction & {
    toTx: () => TransactionBuilder;
};
/**
 * @category Transactions Util
 */
export declare type BuildOptions = {
    latestBlockhash: boolean | {
        blockhash: string;
        lastValidBlockHeight: number;
    };
};
/**
 * @category Transactions Util
 */
export declare class TransactionBuilder {
    private provider;
    private instructions;
    private signers;
    constructor(provider: Provider);
    addInstruction(instruction: Instruction): TransactionBuilder;
    addSigner(signer: Signer): TransactionBuilder;
    isEmpty(): boolean;
    /**
     * Compresses all instructions & signers in this builder
     * into one single instruction
     * @param compressPost Compress all post instructions into the instructions field
     * @returns Instruction object containing all
     */
    compressIx(compressPost: boolean): Instruction;
    /**
     * Constructs a transaction payload with the gathered instructions
     * @returns a TransactionPayload object that can be excuted or agregated into other transactions
     */
    build(options?: BuildOptions): Promise<TransactionPayload>;
    /**
     * Constructs a transaction payload with the gathered instructions, sign it with the provider and send it out
     * @returns the txId of the transaction
     */
    buildAndExecute(): Promise<string>;
}
